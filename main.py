import asyncio
import os
import sys
import subprocess
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F

from recognize import download_audio_snippet, recognize_with_shazam
from spotify import search_tracks, add_track_to_playlist, check_track_in_playlist
        
# –ü–∞—Ä–æ–ª—å –∏ —Ç–æ–∫–µ–Ω
ACCESS_PASSWORD = "1234"
TOKEN_API = "7692359451:AAEicTS7yoAtoY0KifOB-nJ8jqnuD9UbOZo"

# –ë–æ—Ç
bot = Bot(token=TOKEN_API, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = set()

pending_choices = {}

@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in authorized_users:
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
    else:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ üéß")

@dp.message(Command("restart"))
async def restart_handler(message: Message):
    await message.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    python = sys.executable
    os.execl(python, python, *sys.argv)



@dp.message()
async def link_or_password_handler(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if user_id not in authorized_users:
        if text == ACCESS_PASSWORD:
            authorized_users.add(user_id)
            await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ üéß")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏
    if not text.startswith("http"):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    await message.answer("üéß –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç—Ä–µ–∫‚Ä¶")

    try:
        snippet_path = download_audio_snippet(text)

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        result = await recognize_with_shazam(snippet_path)
        track = result.get("track", {})
        title = track.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        subtitle = track.get("subtitle", "")
        artist = subtitle if isinstance(subtitle, str) else ", ".join(a['name'] for a in subtitle)



        # spotify_track_id = search_track(title, artist)
        # if spotify_track_id:
        #     added = add_track_to_playlist(spotify_track_id)
        #     if added:
        #         in_playlist = check_track_in_playlist(spotify_track_id)
        #         if in_playlist:
        #             await message.answer("‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Spotify –ø–ª–µ–π–ª–∏—Å—Ç!")
        #         else:
        #             await message.answer("‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ.")
        #     else:
        #         await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç.")
        # else:
        #     await message.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Spotify.")
            
        #     from spotify import search_tracks, add_track_to_playlist

        spotify_tracks = search_tracks(title, artist)

        if not spotify_tracks:
            await message.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Spotify.")
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            pending_choices[user_id] = spotify_tracks

            track_buttons = [
                [InlineKeyboardButton(
                    text=f"{t['name']} ‚Äî {t['artist']}", callback_data=f"choose_{i}"
                )]
                for i, t in enumerate(spotify_tracks)
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
            track_buttons.append([
                InlineKeyboardButton(
                    text="üîÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É", callback_data="back"
                )
            ])

            kb = InlineKeyboardMarkup(inline_keyboard=track_buttons)


            await message.answer("üîé –í–æ—Ç, —á—Ç–æ –Ω–∞—à—ë–ª –≤ Spotify. –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—Ä–µ–∫:", reply_markup=kb)

        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫
        song_link = track.get("url", "") or track.get("share", {}).get("href", "")
        text = f"<b>{title}</b> ‚Äî {artist}"
        if song_link:
            text += f"\n<a href='{song_link}'>–°–ª—É—à–∞—Ç—å</a>"
        await message.answer(text)

        # –£–¥–∞–ª—è–µ–º —Å–Ω–∏–ø–ø–µ—Ç
        os.remove(snippet_path)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <code>{str(e)}</code>")

@dp.callback_query(F.data == "back")
async def handle_back(callback: CallbackQuery):
    user_id = callback.from_user.id
    pending_choices.pop(user_id, None)
    await callback.message.edit_text("üîÑ –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")


@dp.callback_query(F.data.startswith("choose_"))
async def handle_track_choice(callback: CallbackQuery):
    user_id = callback.from_user.id
    index = int(callback.data.split("_")[1])

    if user_id not in pending_choices or index >= len(pending_choices[user_id]):
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    selected = pending_choices[user_id][index]
    added = add_track_to_playlist(selected["id"])

    if added:
        await callback.message.edit_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç:\n<b>{selected['name']}</b> ‚Äî {selected['artist']}\n"
            f"<a href='{selected['url']}'>–°–ª—É—à–∞—Ç—å –≤ Spotify</a>"
        )
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç.")

    del pending_choices[user_id]

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
